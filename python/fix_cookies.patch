diff --git a/leetcode/api_client.py b/leetcode/api_client.py
index 850cf27..01eb57b 100644
--- a/leetcode/api_client.py
+++ b/leetcode/api_client.py
@@ -500,9 +500,14 @@ class ApiClient(object):
                     headers[auth_setting['key']] = auth_setting['value']
                 elif auth_setting['in'] == 'query':
                     querys.append((auth_setting['key'], auth_setting['value']))
+                elif auth_setting["in"] == "cookie":
+                    cookies = headers.get("Cookie", "")
+                    cookies = cookies + "; " if cookies else ""
+                    cookies += f"{auth_setting['key']}={auth_setting['value']}"
+                    headers["Cookie"] = cookies
                 else:
                     raise ValueError(
-                        'Authentication token must be in `query` or `header`'
+                        'Authentication token must be in `query`, `cookie` or `header`'
                     )
 
     def __deserialize_file(self, response):
diff --git a/leetcode/configuration.py b/leetcode/configuration.py
index f845017..bc25823 100644
--- a/leetcode/configuration.py
+++ b/leetcode/configuration.py
@@ -232,14 +232,14 @@ class Configuration(six.with_metaclass(TypeWithDefault, object)):
             'cookieCSRF':
                 {
                     'type': 'api_key',
-                    'in': 'query',
+                    'in': 'cookie',
                     'key': 'csrftoken',
                     'value': self.get_api_key_with_prefix('csrftoken')
                 },
             'cookieSession':
                 {
                     'type': 'api_key',
-                    'in': 'query',
+                    'in': 'cookie',
                     'key': 'LEETCODE_SESSION',
                     'value': self.get_api_key_with_prefix('LEETCODE_SESSION')
                 },
